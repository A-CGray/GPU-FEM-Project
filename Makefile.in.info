# declare A2D location
A2D_DIR = ${HOME}/repos/a2d
A2D_INCLUDE = -I${A2D_DIR}/include

# declare TACS location
TACS_DIR = ${HOME}/repos/tacs

#CXX = icpc -lmpi -qopenmp # Intel compiler on NAS
CXX = g++ -lmpi # gcc on NAS
#CXX := mpicxx # MPI compiler on laptop
RM = rm -f

# declare location of this directory for the GPU Macros
GPU_DIR = ${HOME}/repos/GPU-FEM-Project
GPU_MACRO_INCLUDE=-I${GPU_DIR}

BENCHMARK_DIR := ${HOME}/packages/benchmark
BENCHMARK_LINK := -L${BENCHMARK_DIR}/build/src -lbenchmark -lpthread
BENCHMARK_INCLUDE := -I${BENCHMARK_DIR}/include

CXX_STD := -std=c++17

# GPU compile
GPU := false
GPU_CXX := nvcc -lmpi
GPU_CC_FLAGS :=
MPI_INC =
MPI_LIB =
CUDA_LIBS :=

# dynamically add MPI_INC and MPI_LIB from MPI compiler
# since NVIDIA CUDA compiler not linked to MPI
#MPI_INC := $(shell ${CXX} -showme:incdirs | sed 's|[^ ]*|-I&|g')
#MPI_LIB := $(shell ${CXX} -showme:libdirs | sed 's|[^ ]*|-L&|g') -lmpi
CUDA_LIBS := -L/usr/local/cuda/lib64 -lcudart

# temporarily suppressing warnings with -w
GPU_CC_FLAGS := -lmpi -O3 -lineinfo --use_fast_math -arch=sm_70 -x cu
# optional sometimes need to downgrade gcc under the hood compiler
# GPU_CC_FLAGS := --compiler-bindir=/usr/bin/gcc-10 -x cu

# Set up for parallel make
MAKE = make -j 8

# Flags for debugging and regular compilation versions (non GPU)
EXTRA_DEBUG_CC_FLAGS = -fPIC -g
EXTRA_CC_FLAGS = -fPIC -Ofast -march=core-avx2 -mtune=core-avx2

# Set the ar flags
AR_FLAGS = rcs

# Defines whether to use static or dynamic linking
# TACS_LD_CMD=${TACS_DIR}/lib/libtacs.a
TACS_LD_CMD=-L${TACS_DIR}/lib/ -Wl,-rpath,${TACS_DIR}/lib -ltacs

GPU_TACS_LD_CMD := -L${TACS_DIR}/lib/ -Xlinker -rpath -Xlinker ${TACS_DIR}/lib -ltacs

# For linux systems, use the following settings:
SO_EXT=so
SO_LINK_FLAGS=-fPIC -shared -qopenmp

# This uses the default installation of LAPACK.
# Use an optimized version of LAPACK if available.
# You may also have to include -lblas as well.

MKLPATH=${MKLROOT}/lib/intel64
MKL_LIBS = -Wl,--start-group ${MKLPATH}/libmkl_intel_lp64.a ${MKLPATH}/libmkl_sequential.a ${MKLPATH}/libmkl_core.a -Wl,--end-group -lpthread

ifeq ($(GPU), true)
    MKL_LIBS = -L${MKLPATH}/libmkl_intel_lp64.a -L${MKLPATH}/libmkl_sequential.a -L${MKLPATH}/libmkl_core.a -lpthread
endif

LAPACK_LIBS = -limf ${MKL_LIBS}
# LAPACK_LIBS = -L/usr/lib/ -llapack -lpthread -lblas


METIS_DIR = ${TACS_DIR}/extern/metis
METIS_INCLUDE = -I${METIS_DIR}/include/
METIS_LIB = ${TACS_DIR}/extern/metis/lib/libmetis.a
